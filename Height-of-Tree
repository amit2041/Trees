/*Sample Input :
10 3 20 30 40 2 40 50 0 0 0 0 
Output:
3
*/


// Following is the given Tree node structure.

/*public class BinaryTreeNode <T>{
	
	public T data;
	public BinaryTreeNode<T>left;
	public BinaryTreeNode<T>right;
	
	public BinaryTreeNode(T data) {
		this.data = data;
	}

}
*/

package binaryTree;

import java.util.Scanner;

public class HeightOfTree {
	
	public static BinaryTreeNode<Integer>takeTreeInputBetter(boolean isRoot, int parentData, boolean isLeft){
		if(isRoot) {
		System.out.println("Enter root data");
		}else {
			if(isLeft) {
				System.out.println("Enter left child of" + parentData);
			}else {
				System.out.println("Enter right child of" + parentData);
			}
		}
		Scanner s = new Scanner(System.in);
		int rootData = s.nextInt();
		if(rootData == -1) {
			return null;
		}
		BinaryTreeNode<Integer> root = new BinaryTreeNode<Integer>(rootData);
		BinaryTreeNode<Integer>leftchild= takeTreeInputBetter(false, rootData, true);
		BinaryTreeNode<Integer>rightchild= takeTreeInputBetter(false, rootData, false);
		root.left = leftchild;
		root.right = rightchild;
		return(root);
	}
	
	public static void printTreeDetailed(BinaryTreeNode<Integer>root) {
		if(root == null) {
			return;
		}
		System.out.print(root.data+":");
		if(root.left!= null) {
			System.out.print("L"+ root.left.data+", ");
		}
		if(root.right!= null) {
			System.out.print("R"+ root.right.data);
		}
		System.out.println();
		printTreeDetailed(root.left);
		printTreeDetailed(root.right);
	}
	
	public static int numNodes(BinaryTreeNode<Integer>root) {
		if(root == null) {
			return 0;
		}
		int leftNodeCount = numNodes(root.left);
		int rightNodeCount = numNodes(root.right);
		return 1+ leftNodeCount + rightNodeCount;
	}
	public static int largest(BinaryTreeNode<Integer>root) {
		if(root==null) {
			return -1;
		}
		int largestLeft = largest(root.left);
		int largestRight = largest(root.right);
		return Math.max(root.data, Math.max(largestLeft, largestRight));
	}
	
	public static int height(BinaryTreeNode<Integer> root) {
		//Your code goes here
		 if (root==null)
        {
            return 0;
        }
        
        int smallLeftOutput=height(root.left);
        int smallRightOutput=height(root.right);
        if (smallLeftOutput>smallRightOutput)
        {
            return smallLeftOutput+1;
        }
        else
        {
            return smallRightOutput+1;
        }
	}

	public static void main(String[] args) {
		// TODO Auto-generated method stub
		BinaryTreeNode<Integer> root = takeTreeInputBetter(true, 0, true);
		printTreeDetailed(root);
		System.out.println("Num of Nodes "+ numNodes(root));
		System.out.println("Largest "+ largest(root));
		int h = height(root);

		System.out.println("Height of Tree "+h);

	}

}